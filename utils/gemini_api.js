const { GoogleGenerativeAI } = require("@google/generative-ai");
require('dotenv').config()

const genAI = new GoogleGenerativeAI(process.env.API_KEY_GEMINI);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

async function geminiApi(message) {
  try {
    const prompt = `${message}`;
    const result = await model.generateContent(prompt);

    const response = result.response.text();
    return response;
  } catch (error) {
    console.error("L·ªói g·ªçi Gemini API:", error.message);
    return "C√≥ l·ªói x·∫£y ra khi g·ªçi Gemini API";
  }
}

async function geminiChatbox(message) {
  const prompt = `
      B·∫°n l√† m·ªôt AI Assistant chuy√™n ph√¢n t√≠ch y√™u c·∫ßu c·ªßa kh√°ch h√†ng.
      Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
      1. Hi·ªÉu √Ω ƒë·ªãnh (intent) c·ªßa kh√°ch h√†ng: v√≠ d·ª• "book_ticket", "find_movie", "recommend_movie".
      2. Tr√≠ch xu·∫•t c√°c th√¥ng tin c·∫ßn thi·∫øt (entities) t·ª´ y√™u c·∫ßu c·ªßa kh√°ch h√†ng:
         - movie_name
         - location: 
         - date:
         - time:
         - tickets
         - genre: tr·∫£ v·ªÅ th·ªÉ lo·∫°i
      3. Tr·∫£ l·ªùi **ch·ªâ duy nh·∫•t** b·∫±ng JSON theo format:
      {
        "intent": "...",
        "entities": {
          "movie_name": "...",
          "location": "...",
          "date": "...",
          "time": "...",
          "tickets": 0,
          "genre": "...",
        }
      }
      4. n·∫øu kh√°ch h√†ng ch√†o b·∫°n th√¨ b·∫°n h√£y ch√†o l·∫°i v√† ch·ªâ c·∫ßn tr·∫£ v·ªÅ 
        {
          message: l·ªùi ch√†o c·ªßa b·∫°n ƒë·∫øn kh√°ch h√†ng m·ªôt c√°ch thanh l·ªãch, trang tr·ªçng, t√™n c·ªßa r·∫°p l√† TickNow v√† gi·ªëng nh∆∞ m·ªôt support.
        }
      5. N·∫øu ng∆∞·ªùi d√πng h·ªèi "l√†m sao ƒë·ªÉ ƒë·∫∑t v√© xem phim ho·∫∑c li√™n quan t·ªõi ch∆∞a bi·∫øt c√°ch ƒë·∫∑t v√©" th√¨ tr·∫£ v·ªÅ: 
        {
          message: "
            1Ô∏è‚É£ ƒê·∫∑t v√© ngay  üéüÔ∏è
            2Ô∏è‚É£ Xem danh s√°ch phim ƒëang chi·∫øu üé¨
            3Ô∏è‚É£ T√¨m l·ªãch chi·∫øu theo r·∫°p üìç
            4Ô∏è‚É£ Xem chi ti·∫øt phim ‚ÑπÔ∏è
          "
        }
      6. Phim n√†o ƒëang hot tu·∫ßn n√†y? ho·∫∑c phim n√†o ƒëang hot tr·∫£ v·ªÅ:
        + th√™m m·ªôt thu·ªôc t√≠nh n·∫±m trong entities l√† star: true v√† limit: 1;
        + n·∫øu s·ªë l∆∞·ª£ng l√† nhi·ªÅu th√¨ v·∫´n star: true nh∆∞ng limit : 5
      ‚ö†Ô∏è Quy t·∫Øc b·∫Øt bu·ªôc:

      - N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh r√µ intent c·ªßa ng∆∞·ªùi d√πng ‚Üí tr·∫£ v·ªÅ:
      {
        "intent": "unknown",
        "entities": {}
      }
      - Kh√¥ng gi·∫£i th√≠ch, kh√¥ng tr·∫£ l·ªùi lan man, kh√¥ng ƒë∆∞a th√¥ng tin ngo√†i JSON.
      - N·∫øu thi·∫øu th√¥ng tin ‚Üí ƒë·ªÉ gi√° tr·ªã r·ªóng ("") ho·∫∑c null.

      - Tr∆∞·ªùng location tr·∫£ v·ªÅ ch·ªâ c√≥ ƒë·ªãa ch·ªâ v√≠ d·ª•: "Th√†nh ph·ªë H·ªì Ch√≠ Minh" tr·∫£ v·ªÅ H·ªì Ch√≠ Minh

      -Tr∆∞·ªùng Time tr·∫£ v·ªÅ th·ªùi gian chi ti·∫øt n·∫øu kh√°ch h√†ng ghi r√µ c√≤n n·∫øu kh√°ch h√†ng ghi (s√°ng, tr∆∞a, t·ªëi):
        + tr·∫£ v·ªÅ kho·∫£ng th·ªùi gian t∆∞∆°ng ·ª©ng v·ªõi kh√°ch h√†ng y√™u c·∫ßu v√≠ d·ª• s√°ng: 08:00 - 12:00
        + n·∫øu chi·ªÅu th√¨ tr·∫£ v·ªÅ kho·∫£ng th·ªùi gian c·ªßa bu·ªïi tr∆∞a

      - Tr∆∞·ªùng "date" tr·∫£ v·ªÅ ng√†y hi·ªán t·∫°i l√† 2025/08/01.- N·∫øu ng∆∞·ªùi d√πng n√≥i "h√¥m nay ho·∫∑c nay" ‚Üí tr·∫£ v·ªÅ "2025/08/01".
        + N·∫øu ng∆∞·ªùi d√πng n√≥i "ng√†y mai ho·∫∑c mai" ‚Üí tr·∫£ v·ªÅ "2025/08/02".
        + N·∫øu ng∆∞·ªùi d√πng n√≥i "ng√†y kia ho·∫∑c kia" ‚Üí tr·∫£ v·ªÅ "2025/08/03".
        + N·∫øu ng∆∞·ªùi d√πng n√≥i th·ª© trong tu·∫ßn (th·ª© 2, th·ª© 3, ...), h√£y t√≠nh to√°n ng√†y t∆∞∆°ng ·ª©ng g·∫ßn nh·∫•t v√† tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng YYYY/MM/DD.
        + N·∫øu kh√¥ng c√≥ y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng th√¨ kh√¥ng c·∫ßn tr·∫£ v·ªÅ 
      ng∆∞·ªùi d√πng : ${message}
    `;

  const reply = await geminiApi(prompt);

  const cleaned = reply
    .replace(/```json/g, "")
    .replace(/```/g, "")
    .trim();

  const output = JSON.parse(cleaned);

  return output;
}

module.exports = { geminiApi, geminiChatbox }